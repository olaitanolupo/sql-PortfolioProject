


from portfolioproject..NashvilleHousing


--1 Date Standardization


select saledateconverted,convert(date,saledate)
from portfolioproject..NashvilleHousing

Alter table portfolioproject..NashvilleHousing
add saledateconverted date;

update portfolioproject..NashvilleHousing
set saledateconverted = CONVERT (date,saledate)




--populating property Address data

select*
from portfolioproject..NashvilleHousing
--where PropertyAddress is null
order by ParcelID


select A.ParcelID,A.PropertyAddress,B.parcelID,B.PropertyAddress, ISNULL(A.PropertyAddress,B.PropertyAddress)
from portfolioproject..NashvilleHousing A
join portfolioproject..NashvilleHousing B
    on A.ParcelID = B.parcelID
AND A.[uniqueID ] <> B.[uniqueID ]
where A.PropertyAddress is null


UPDATE A
SET PropertyAddress = ISNULL(A.PropertyAddress,B.PropertyAddress)
from portfolioproject..NashvilleHousing A
join portfolioproject..NashvilleHousing B
    on A.ParcelID = B.parcelID
AND A.[uniqueID ] <> B.[uniqueID ]
where A.PropertyAddress is null


--BREAKING ADREESSES INTO INDIVIDUAL COLUMNS(ADDRESS,CITY,STATE)

select PropertyAddress
from portfolioproject..NashvilleHousing

select
SUBSTRING(PropertyAddress,1,CHARINDEX(',',PropertyAddress)-1)as Address
,SUBSTRING(PropertyAddress,CHARINDEX(',',PropertyAddress)+1, LEN(PropertyAddress)) as Address
from portfolioproject..NashvilleHousing

Alter table portfolioproject..NashvilleHousing
add PropertySplitAddress NVARCHAR(255);

update portfolioproject..NashvilleHousing
set PropertySplitAddress = SUBSTRING(PropertyAddress,1,CHARINDEX(',',PropertyAddress)-1)


Alter table portfolioproject..NashvilleHousing
add PropertySplitCity NVARCHAR(255);

update portfolioproject..NashvilleHousing
SET PropertySplitCity = SUBSTRING(PropertyAddress,CHARINDEX(',' ,PropertyAddress) + 1 , LEN (PropertyAddress))

select*
from portfolioproject..NashvilleHousing


--OWNERS ADDRESS USING PARSENAME


SELECT OwnerAddress
from portfolioproject..NashvilleHousing
--where OwnerAddress is null
select
PARSENAME(REPLACE(OwnerAddress, ',','.'),3),
PARSENAME(REPLACE(OwnerAddress, ',','.'),2),
PARSENAME(REPLACE(OwnerAddress, ',','.'),3)
from  portfolioproject..NashvilleHousing



Alter table portfolioproject..NashvilleHousing
add OwnerSplitAddress NVARCHAR(255);

update portfolioproject..NashvilleHousing
SET OwnerSplitAddress = PARSENAME(REPLACE (OwnerAddress, ',','.'),3)


Alter table portfolioproject..NashvilleHousing
add OwnerSplitCity NVARCHAR(255);

update portfolioproject..NashvilleHousing
SET OwnerSplitCity = PARSENAME(REPLACE(OwnerAddress, ',','.'),2)


Alter table portfolioproject..NashvilleHousing
add OwnerSplitState NVARCHAR(255);

update portfolioproject..NashvilleHousing
SET OwnerSplitState = PARSENAME(REPLACE(OwnerAddress, ',','.'),3)


select *
from portfolioproject..NashvilleHousing



--CHANGING Y/N TO YES AND NO IN THE #SOLDASVACANT COLUMN


 


select SoldAsVacant
,case when SoldAsVacant = 'Y' then 'YES'
      WHEN  SoldAsVacant = 'N' THEN 'NO'
 else SoldAsVacant
 end
from portfolioproject..NashvilleHousing


update  portfolioproject..NashvilleHousing
set SoldAsVacant = case when SoldAsVacant = 'Y' then 'YES'
      WHEN  SoldAsVacant = 'N' THEN 'NO'
 else SoldAsVacant
 end



-- REMOVE DUPLICATES

with RowNumCte as (
select *,
       row_number() over (
  partition by ParcelID,
               PropertyAddress,
SaleDate,
LegalReference
order by
 UniqueID
 )row_num
from portfolioproject..NashvilleHousing
--order by ParcelID
)      
select*
from RowNumCte
where row_num > 1
--order by PropertyAddress


--  TO DELETE DUPLICATED ROWS
--delete*
--from RowNumCte
--where row_num > 1
----order by PropertyAddress



--DELETE UNUSED COLUMNS


SELECT *
from portfolioproject..NashvilleHousing

ALTER TABLE portfolioproject..NashvilleHousing
DROP COLUMN PropertyAddress,SaleDate,TaxDistrict
